Google Drive for Linux
############################

this was built to support in house use, so it has not been fully tested with a range of distros/versions; however it is basically a python wrapper for the google api and Rclone (https://rclone.org/) so maybe don't despair for other use cases.

There are 2 basic ways to use this:
1. a panel applet that will streamline mounting google drives from rclone. (e.g. Gui)
2. a command line tool that will allow you to mount google drives from rclone. (e.g. Cli)

.. contents:: Table of Contents
   :local:
   :depth: 3

Tested Distros
==================

Below is a non-exhaustive list of distros that this has been tested on. If you have tested this on a distro not listed below, please let me know so I can add it to the list.

* Xubuntu 22.04

yep that's it sorry!

Installation
==================

# todo make pip installible and how to add to startup


Method / Structure
=====================

The basic structure for this app/rclone wrapper is as follows:

file structure
------------------

All components are hosted in the mount dir: ~/google_mount_point

This directory holds:
1. a cache dir for the google api (~/google_mount_point/.cache)
2. a config dir for rclone (~/google_mount_point/.config) which contains:
    1. a master config file
    2. a config file for each user/email address
    3. a text file with rclone mount options to use (~/google_mount_point/.config/.mount_options)
    4. a text file with a list of shortcodes for each user/email address (~/google_mount_point/.config/.shortcodes)
    5. a text file that holds a list of the mounted drives (~/google_mount_point/.config/.mounted_drives) which is used for system startup
    6. a text file that holds the trayapp state (~/google_mount_point/.config/.trayapp_state) which is used for system startup
3. a mount dir for each mounted drive

Definitions
------------------
* **user/email address** - the email address of the user (e.g. jojo@gmail.coms)
* **Shortcode** - a short code that is used to identify a user/email address (either user specified or email_address.split('@')[0])
* **Mount_name/drive** - the name of the directory where the google drive will be mounted and the name of the drive. This is defined as "{short_code}~{drive_name}" (e.g. 'jojo~My_Drive') note spaces are replaced with underscores
* **raw_drive_name** - the name of the google drive as held in google (e.g. 'My Drive')

Permissions/config management
--------------------------------

The app is designed to allow multiple simultaneous google drives/users to be mounted. To do this, the app:

1. creates/updates a master config file (~/google_mount_point/.config/.master_config) that holds a rclone config for each user/email address with the mount name being the email address.  This master config file is only edited by the app to add/remove users and to list the available drives for each user.
2. there is a config file for each user/email address (~/google_mount_point/.config/.{email_address}) that holds the rclone config for that user/email address. This file is frequently re-generated by the app to ensure that all drives are available to be mounted.  The permissions for the mounts are pulled from the master config file. the remote name is the mount name "{short_code}~{drive_name}" (e.g. 'jojo~My_Drive')
3. when a drive is mounted a new tmux session is created with the name "*gd~{shortcode}~{drive_name}" (e.g. '*gd~jojo~My_Drive') and the mount is run in that session.  This allows multiple drives to be mounted simultaneously and allows the user to investigate any issues with the mount.  The * is used to ensure that the tmux session appears at the top of the tmux ls list so that it does not make tmux harder to use.

The permissions for all of the config files are set to 600 so that only the user can read/write to them.  This is done to ensure that the user can not accidentally expose their google drive to other users on the system.  That being said these files are not encrypted (as per normal Rclone config files) so if you are worried about someone getting access to your files you should encrypt your drive (e.g. whole disk encryption).


Usage
==================

Panel Applet
------------------

Command line interface
------------------------

Command line interface as systemd service
-----------------------------------------


Extending path support
========================

The panel app has a 'Drive Path Support' option that allows you to copy and or open files in Google Drive
based on the path of the file in the local file system.  This is done by leveraging rclone lsjson and getting the google ID.

There could be merits in extending the options available in this window to allow for more complex path support related to your use case.  If you want to do this you are able to pass a custom Gpath object to the app.  This object must be a subclass of gui.gpath_support_gui.Gpath.  You will need to override the "add_buttons" method to allow for the creation of new buttons/feature in the window.

Distro Specific Notes
=======================

This is a place holder


